import re
import asyncio

from aiogram import Router, F
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.state import StatesGroup, State
from aiogram.filters import CommandStart, StateFilter

from app.database.quary_db import register_user_db, get_username, get_text_from_db
from app.keyboards.inline import auth_keyboard
from app.keyboards.reply import menu_kb

router_1 = Router()

temp_storage = {}

class Register(StatesGroup):
    name = State()
    username = State()
    password = State()
    
class Login(StatesGroup):
    check_username = State()
    check_password = State()
    
@router_1.message(CommandStart())
async def cmd_start(message: Message, session):
    text = await get_text_from_db(session, 1)
    await message.answer(text, parse_mode=ParseMode.HTML, reply_markup=await auth_keyboard())


@router_1.callback_query(StateFilter(None), F.data == 'register')
async def register(callback: CallbackQuery, state: FSMContext):
    await callback.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
    await callback.message.answer(
    "<b>üëã –ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç? –ù–∞–ø–∏—à–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å üöÄ</b>",
    parse_mode=ParseMode.HTML)
    await state.set_state(Register.name)


@router_1.message(Register.name, F.text)
async def state_reg_1(message: Message, state: FSMContext):
    if re.match("^[A-Za-z–ê-–Ø–∞-—è–Å—ë]+$", message.text):
        await state.update_data(name=message.text)
        await message.answer("<b>üîë –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π username, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å!</b>",
        parse_mode=ParseMode.HTML)
        await state.set_state(Register.username)
    else:
        await message.answer("<b>‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã. –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã.</b>",
        parse_mode=ParseMode.HTML)
    
@router_1.message(Register.name)
async def check_state_reg_step_1(message: Message):
    await message.answer("<b>‚ùå –í–≤–µ–¥–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.</b>",
    parse_mode=ParseMode.HTML)


@router_1.message(Register.username, F.text)
async def state_reg_2(message: Message, state: FSMContext, session):
    username = await get_username(session, message.text)
    if not username:
        if re.match("^[A-Za-z0-9_]{6,}+$", message.text):
            await state.update_data(username=message.text)
            await message.answer("<b>üîí –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.</b>",
            parse_mode=ParseMode.HTML)
            await state.set_state(Register.password)
        else:
            await message.answer(
            "<b>‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è. –ú–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤.</b>",
            parse_mode=ParseMode.HTML)
            return
    else:
        await message.answer(
        "<b>‚ùå –≠—Ç–æ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –∑–∞–Ω—è—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ.</b>",
        parse_mode=ParseMode.HTML)

@router_1.message(Register.username)
async def check_state_reg_step_2(message: Message):
    await message.answer("<b>‚ùå –í–≤–µ–¥–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.</b>",
    parse_mode=ParseMode.HTML)
    

@router_1.message(Register.password, F.text)
async def state_reg_3(message: Message, state: FSMContext, session):
    if re.match("^[A-Za-z0-9]{8,}+$", message.text):
        await state.update_data(password=message.text)
        await message.answer("<b>üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! üöÄ</b>",
        parse_mode=ParseMode.HTML)
        await asyncio.sleep(2)
        await message.answer(
        "<i>–¢–µ–ø–µ—Ä—å –≤–æ–π–¥–∏—Ç–µ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏.</i>",
        parse_mode=ParseMode.HTML, reply_markup=await auth_keyboard())
        data = await state.get_data()
        await register_user_db(session, message, data)
        await state.clear()
    else:
        await message.answer(
        "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã (–Ω–µ –º–µ–Ω–µ–µ 8 —Å–∏–º–≤–æ–ª–æ–≤).",
        parse_mode=ParseMode.HTML)

@router_1.message(Register.password)
async def check_state_reg_step_3(message: Message):
    await message.answer("<b>‚ùå –í–≤–µ–¥–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.</b>",
    parse_mode=ParseMode.HTML)


@router_1.callback_query(StateFilter(None), F.data == 'login')
async def login(callback: CallbackQuery, state: FSMContext):
    await callback.answer("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
    await callback.message.answer(
    "<b>üîë –í–≤–µ–¥–∏—Ç–µ –≤–∞—à username –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.</b>", parse_mode=ParseMode.HTML)
    await state.set_state(Login.check_username)


@router_1.message(Login.check_username, F.text)
async def state_login_1(message: Message, state: FSMContext):
    await state.update_data(check_username=message.text)
    await message.answer("<b>üîí –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞.</b>", parse_mode=ParseMode.HTML)
    await state.set_state(Login.check_password)
    
@router_1.message(Login.check_username)
async def check_login_step_1(message: Message):
    await message.answer("<b>‚ùå –í–≤–µ–¥–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.</b>",
    parse_mode=ParseMode.HTML)
    

@router_1.message(Login.check_password, F.text)
async def state_login_2(message: Message, state: FSMContext, session):
    check_password = message.text
    data = await state.get_data()
    data_username = data.get('check_username')
    get_info_user = await get_username(session, data_username)   
    if get_info_user is not None and get_info_user.password == check_password:
        temp_storage['username'] = data_username
        await state.update_data(check_password=message.text)
        await message.answer(f'''<b>üè¶ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AurumVault!</b>, {data_username}!
<b>üí∞ –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {get_info_user.balance:,.0f} —Å–æ–º–æ–≤.</b>'''.replace(',', '.'), parse_mode=ParseMode.HTML,
        reply_markup=await menu_kb())
        await state.clear()
    else:
        await message.answer(
        "<b>‚ùå –í–≤–µ–¥–µ–Ω—ã –Ω–µ–≤–µ—Ä–Ω—ã–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.</b>",
        parse_mode=ParseMode.HTML, reply_markup=await auth_keyboard())
        await state.clear()

@router_1.message(Login.check_password)
async def check_login_step_2(message: Message):
   await message.answer("<b>‚ùå –í–≤–µ–¥–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.</b>",
    parse_mode=ParseMode.HTML)
