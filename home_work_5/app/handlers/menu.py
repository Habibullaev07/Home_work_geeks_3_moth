import re
import asyncio

from aiogram import Router, F
from aiogram.enums import ParseMode
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.state import State, StatesGroup

from app.database.quary_db import  get_username,  update_password, get_text_from_db
from app.keyboards.inline import top_up_request_kb
from app.middleware.check_user import Check_user
from app.handlers.auth_users import temp_storage
from app.keyboards.reply import del_reply_kb, menu_kb


router_2 = Router()
router_2.message.middleware(Check_user())
   
class Change_Password(StatesGroup):
    old_password = State()
    new_password = State()

class Transfer_money(StatesGroup):
    username_for_transfer = State()
    transfer_amount = State()
    
class Replenishment_Money(StatesGroup):
    replenishment_amount = State()
    
def get_temp_storage():
    return temp_storage.get('username')


@router_2.message(F.text.lower() == "–ø—Ä–æ—Å–º–æ—Ç—Ä –±–∞–ª–∞–Ω—Å–∞")
async def view_balance(message: Message, session):
    username = get_temp_storage()
    balance = await get_username(session, username)
    # balance = round(get_balance.balance, 2)
    await message.answer(f"üí∞ <b>–í–∞—à –±–∞–ª–∞–Ω—Å: {balance.balance:,.0f} —Å–æ–º–æ–≤</b>".replace(',', '.'),
    parse_mode=ParseMode.HTML)
    

@router_2.message(StateFilter(None), F.text.lower() == "–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—á–µ—Ç–∞")
async def replenishment_of_balance(message: Message, state: FSMContext, session):
    username = get_temp_storage()
    data_user = await get_username(session, username)
    if data_user.deposit_balance != 0:
        await message.answer(
    f"üí∏ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:</b> {data_user.deposit_balance:,.0f}".replace(',', '.'),
        parse_mode=ParseMode.HTML)
        await asyncio.sleep(1)
        await message.answer("<b>üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å—á–µ—Ç–∞:</b>", parse_mode=ParseMode.HTML,
        reply_markup=del_reply_kb)
        await state.set_state(Replenishment_Money.replenishment_amount)
    else:
        await message.answer(
    f"<b>üí∞ –ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ</b> <i>{data_user.deposit_balance:,.0f}</i> <b>—Å–æ–º–æ–≤.</b><br>".replace(',', '.'),
        parse_mode=ParseMode.HTML)
        await asyncio.sleep(1.5)
        await message.answer("<i>üö´ –í—ã –∏—Å—á–µ—Ä–ø–∞–ª–∏ –≤—Å–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è.</i>",
        parse_mode=ParseMode.HTML)  
    
    
@router_2.message(Replenishment_Money.replenishment_amount, F.text)
async def state_replenishment_balance(message: Message, state: FSMContext, session: AsyncSession):
    username = get_temp_storage()
    data_user = await get_username(session, username)
    deposit_balance = round(data_user.deposit_balance, 2)
    if message.text.isdigit():
        replenishment_amount = int(message.text)
        if deposit_balance >= replenishment_amount:
            data_user.deposit_balance -= replenishment_amount
            data_user.balance += replenishment_amount
            await state.update_data(replenishment_balance=replenishment_amount)
            await message.answer(
            f"üéâ <b>–£—Å–ø–µ—Ö!</b> –í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ <b>{replenishment_amount}</b> —Å–æ–º–æ–≤! üí∞",
            parse_mode=ParseMode.HTML, reply_markup=await menu_kb())
            await session.commit()
            await state.clear()
        else:
            await message.answer(
    f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞ <b>{replenishment_amount}</b>. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é —Å—É–º–º—É.",
            parse_mode=ParseMode.HTML)
    else:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ <b>—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞</b>. üî¢",
        parse_mode=ParseMode.HTML)
    
    
@router_2.message(StateFilter(None),F.text.lower() == '–ø–µ—Ä–µ–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤')
async def transfer_of_funds(message: Message, state: FSMContext):
    await message.answer("üí∏ –ö–æ–º—É —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏? –ù–∞–ø–∏—à–∏—Ç–µ <b>username</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
    reply_markup=del_reply_kb, parse_mode=ParseMode.HTML)
    await state.set_state(Transfer_money.username_for_transfer)

@router_2.message(Transfer_money.username_for_transfer, F.text)
async def state_transfer_step_1(message: Message, state: FSMContext, session):
    user_text = message.text
    username = await get_username(session, user_text)
    if  username:
        await state.update_data(recipient_username=user_text)
        await message.answer(f"üí∞ –°–∫–æ–ª—å–∫–æ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ <b>{user_text}</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é?",
        parse_mode=ParseMode.HTML)
        await state.set_state(Transfer_money.transfer_amount)
    else:
        await message.answer("<b>‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ:</b> –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!",
        parse_mode=ParseMode.HTML)
        return

@router_2.message(Transfer_money.transfer_amount)
async def state_transfer_step_2(message: Message, state: FSMContext, session):
    username = get_temp_storage()
    balance = await get_username(session, username)
    balance = round(balance.balance, 2)
    if balance >= 10:
        await state.update_data(transfer_amount=message.text)
        data = await state.get_data()
        await message.answer(
        "<b>‚ö† –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è:</b> –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.",
        parse_mode=ParseMode.HTML)
        await asyncio.sleep(1.5)
        await message.answer(
        f"<b>üí∏ –í—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:</b> {data['recipient_username']}",
        parse_mode=ParseMode.HTML)
        await asyncio.sleep(1)
        await message.answer(
        f"<b>üí∏ –°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞:</b> {data['transfer_amount']} —Å–æ–º–æ–≤",
        parse_mode=ParseMode.HTML, reply_markup=await top_up_request_kb())

    else:
        await message.answer(
        f"<b>‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤:</b> –£ –≤–∞—Å –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –≤—Å–µ–≥–æ {balance} —Å–æ–º–æ–≤.")
        await asyncio.sleep(1)
        await message.answer(
        "<b>‚ùó –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞:</b> –°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 10 —Å–æ–º–æ–≤.",
        parse_mode=ParseMode.HTML)


@router_2.callback_query(StateFilter('*'), F.data == 'cancellation')
async def cancel_state(callback: CallbackQuery, state: FSMContext):
    await callback.answer("–û—Ç–º–µ–Ω–∞")
    await callback.message.answer("<b>‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—é.</b>",
    parse_mode=ParseMode.HTML)
    await state.clear()

@router_2.callback_query(StateFilter('*'), F.data == 'yes_top_up')
async def confirmation(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    await callback.answer("–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –¥–µ–Ω—å–≥–∏")
    data = await state.get_data()
    transfer_amount = int(data['transfer_amount'])
    recipient_username = data['recipient_username']
    
    username_sender = get_temp_storage()
    sender = await get_username(session, username_sender)
    recipient_username = await get_username(session, recipient_username)
    
    sender.balance -= transfer_amount
    recipient_username.balance += transfer_amount
    await session.commit()
    await callback.message.answer(
    "<b>‚úÖ –£—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–æ!</b> –í–∞—à–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –±–µ–∑ –æ—à–∏–±–æ–∫. –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—Å!",
    parse_mode=ParseMode.HTML, reply_markup=await menu_kb())
    await state.clear()


@router_2.message(StateFilter(None), F.text.lower() == '—Å–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è')
async def change_password(message: Message, state: FSMContext):
    await message.answer("<b>üîê –°—Ç–∞—Ä—ã–π –ø–∞—Ä–æ–ª—å:</b> –í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.",
    parse_mode=ParseMode.HTML, reply_markup=del_reply_kb)
    await state.set_state(Change_Password.old_password)
    

@router_2.message(Change_Password.old_password, F.text)
async def change_pass_step_1(message: Message, state: FSMContext, session):
    old_password = message.text
    data_username = temp_storage.get('username')
    get_old_pass_with_db = await get_username(session, data_username)
    if get_old_pass_with_db.password ==  old_password:
        await state.update_data(old_password=old_password)
        await message.answer("<b>üîë –ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å:</b> –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.",
        parse_mode=ParseMode.HTML)
        await state.set_state(Change_Password.new_password)
    else:
        await message.answer("<b>‚ùå –ù–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω –ø–∞—Ä–æ–ª—å!</b> –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
        parse_mode=ParseMode.HTML)

@router_2.message(Change_Password.old_password)
async def check_state_change_step_1(message: Message):
    await message.answer(
    "<b>‚ùó –í–≤–µ–¥–µ–Ω—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!</b> –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.",
    parse_mode=ParseMode.HTML)
    
@router_2.message(Change_Password.new_password, F.text)
async def change_pass_step_2(message: Message, state: FSMContext, session):
    new_pass = message.text
    data_username = temp_storage.get('username')
    if re.match("^[A-Za-z0-9_]{8,}+$", new_pass):
        await state.update_data(new_password=new_pass)
        await message.answer("<b>‚úÖ –ü–∞—Ä–æ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω!</b>", parse_mode=ParseMode.HTML,
        reply_markup=await menu_kb())
        data = await state.get_data()
        get_data_new_pass = data.get('new_password')
        await update_password(session, data_username, get_data_new_pass)
        await state.clear()
    else:
        text = await get_text_from_db(session, 3)
        await message.answer(text, parse_mode=ParseMode.HTML)

@router_2.message(Change_Password.new_password)
async def check_state_change_step_2(message: Message):
    await message.answer(
    "<b>‚ùó –í–≤–µ–¥–µ–Ω—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!</b> –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.",
    parse_mode=ParseMode.HTML)
    
@router_2.message(F.text.lower() == "–≤—ã—Ö–æ–¥ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞")
async def logout_from_acount(message: Message):
    temp_storage.pop('username', None)
    await message.answer("<b>üö™ –í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞</b> <i>–î–æ —Å–∫–æ—Ä—ã—Ö –≤—Å—Ç—Ä–µ—á! üëã</i>",
    parse_mode=ParseMode.HTML, reply_markup=del_reply_kb)
    await asyncio.sleep(1)
    await message.answer(
    "<b>üîë –ï—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start</b> <i>–ú—ã –≤—Å–µ–≥–¥–∞ —Ä–∞–¥—ã –ø–æ–º–æ—á—å! üöÄ</i>",
    parse_mode=ParseMode.HTML)
    
    
    
    
    

    

        