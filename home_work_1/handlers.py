import time
import random

from aiogram import types, Router, F
from aiogram.filters import CommandStart, Command, or_f
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup 


router = Router()

photo_win = "https://media.makeameme.org/created/you-win-nothing-b744e1771f.jpg"

numbers = random.randint(1, 100)
attempts = 5

class GameGuessNumber(StatesGroup):
    lets_start_game = State()
    first_handler = State()
    two_handler = State()
    three_handler = State()
    four_handler = State()

async def more_or_less_hint(message: types.Message, message_text):
    if message_text > numbers:
        await message.answer(f"–î–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ üëâ {message_text} - –±–æ–ª—å—à–µüîπ\n–í–µ–¥–∏—Ç–µ –Ω–∞–∏–º–µ–Ω—å—à–µ–µ —á–∏—Å–ª–æ")
    else:
        await message.answer(f"–î–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ üëâ {message_text} - –º–µ–Ω—å—à–µüî∏\n–í–µ–¥–∏—Ç–µ –Ω–∞–∏–±–æ–ª—å—à–µ–µ —á–∏—Å–ª–æ")
    time.sleep(0.5)
    
@router.message(CommandStart())
async def cmd_start(message: types.Message):
    await message.answer(text=f"–ü—Ä–∏–≤–µ—Ç - {message.from_user.first_name}")
    await message.answer(text="–í—ã –≥–æ—Ç–æ–≤—ã –∏–≥—Ä–∞—Ç—å —É–≥–∞–¥–∞–π —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100?")
    await message.answer(text="–ø—Ä–æ—Å—Ç–æ –≤–µ–¥–∏—Ç–µ '–¥–∞' –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start_game ")

@router.message(or_f(Command('start_game'), F.text.lower().contains('–¥–∞')))
async def game_started(message: types.Message, state: FSMContext):
    global attempts, numbers
    numbers = random.randint(1, 100)
    attempts = 5
    await message.answer(text="–Ø –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100 —É–≥–∞–¥–∞–π—Ç–µ! \n—É –≤–∞—Å –µ—Å—Ç—å 5 –ø–æ–ø—ã—Ç–æ–∫")
    await state.set_state(GameGuessNumber.lets_start_game)

@router.message(GameGuessNumber.lets_start_game)
async def attempt_1(message: types.Message, state: FSMContext):
    global attempts
    try:
        massage_text = int(message.text)
    except ValueError:
        await message.answer(f"–í–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞ \n{message.from_user.first_name}. ") 
        return
    if massage_text != numbers:
        attempts -= 1 
        await more_or_less_hint(message, massage_text)
        await message.answer(f"–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–∫–∏ - {attempts}")
        await state.set_state(GameGuessNumber.first_handler)
    else:
        await message.answer("–í—ã —É–≥–∞–¥–∞–ª–∏ —á–∏—Å–ª–æ")
        time.sleep(1)
        await message.answer_photo(photo_win)
        await message.answer('–ü–æ–∑–¥—Ä–∞–≤–ª—è—é')
        await state.clear()


@router.message(GameGuessNumber.first_handler)
async def attempt_2(message: types.Message, state: FSMContext):
    global attempts
    try:
        massage_text = int(message.text)
    except ValueError:
        await message.answer(f"–í–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞ \n{message.from_user.first_name}. ") 
        return 
    if massage_text != numbers:
        attempts -= 1 
        await more_or_less_hint(message, massage_text)
        await message.answer(f"–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–∫–∏ - {attempts}")
        await state.set_state(GameGuessNumber.two_handler)    
    else:
        await message.answer("–í—ã —É–≥–∞–¥–∞–ª–∏ —á–∏—Å–ª–æ")
        time.sleep(1)
        await message.answer_photo(photo_win)
        await message.answer('–ü–æ–∑–¥—Ä–∞–≤–ª—è—é')
        await state.clear()
    
@router.message(GameGuessNumber.two_handler)
async def attempt_3(message: types.Message, state: FSMContext):
    global attempts
    try:
        massage_text = int(message.text)
    except ValueError:
        await message.answer(f"–í–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞ \n{message.from_user.first_name}. ") 
        return
    if massage_text != numbers:
        attempts -= 1 
        await more_or_less_hint(message, massage_text)
        await message.answer(f"–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–∫–∏ - {attempts}")
        await state.set_state(GameGuessNumber.three_handler)
    else:
        await message.answer("–í—ã —É–≥–∞–¥–∞–ª–∏ —á–∏—Å–ª–æ")
        time.sleep(1)
        await message.answer_photo(photo_win)
        await message.answer('–ü–æ–∑–¥—Ä–∞–≤–ª—è—é')
        await state.clear()

@router.message(GameGuessNumber.three_handler)
async def attempt_4(message: types.Message, state: FSMContext):
    global attempts
    try:
        massage_text = int(message.text)
    except ValueError:
        await message.answer(f"–í–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞ \n{message.from_user.first_name}. ") 
        return
    if massage_text != numbers:
        attempts -= 1 
        await more_or_less_hint(message, massage_text)
        await message.answer(f"–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–∫–∏ - {attempts}")
        await state.set_state(GameGuessNumber.four_handler)
    else:
        await message.answer("–í—ã —É–≥–∞–¥–∞–ª–∏ —á–∏—Å–ª–æ")
        time.sleep(1)
        await message.answer_photo(photo_win)
        await message.answer('–ü–æ–∑–¥—Ä–∞–≤–ª—è—é')
        await state.clear()
        
@router.message(GameGuessNumber.four_handler)
async def attempt_5(message: types.Message, state: FSMContext):
    global attempts
    try:
        massage_text = int(message.text)
    except ValueError:
        await message.answer(f"–í–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞ \n{message.from_user.first_name}. ") 
        return
    if massage_text != numbers: 
        await message.answer("–í—ã –Ω–µ —É–≥–∞–¥–∞–ª–∏ —á–∏—Å–ª–æ üòå\n—É –≤–∞—Å –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫ –∏–≥—Ä–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–æ!")
        time.sleep(1)
        await message.answer_photo("https://media.makeameme.org/created/sorry-you-lose.jpg")
        time.sleep(1)
        await message.answer(f"–ö—Å—Ç–∞—Ç–∏ —á–∏—Å–ª–æ –±—ã–ª–æ {numbers}üòÅ")
        await message.answer("–ù–∞–∂–º–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É üëâ/start_game —á—Ç–æ –±—ã –∑–∞–Ω–æ–≤–æ –Ω–∞—á–∞—Ç—å")
        await state.clear()
    else:
        await message.answer("–í—ã —É–≥–∞–¥–∞–ª–∏ —á–∏—Å–ª–æ")
        time.sleep(1)
        await message.answer_photo(photo_win)
        await message.answer('–ü–æ–∑–¥—Ä–∞–≤–ª—è—é')
        await state.clear()
